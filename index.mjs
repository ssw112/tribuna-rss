import { chromium } from '@playwright/test';
import { writeFileSync, mkdirSync } from 'fs';

const ORIGIN = 'https://ua.tribuna.com';
const SOURCE = `${ORIGIN}/news/`;
const MAX_ITEMS = 25;

const esc = (s='') => s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');

console.log('USING DOMCONTENTLOADED BUILD');

async function run() {
  const browser = await chromium.launch({
    headless: true,
    args: ['--no-sandbox','--disable-dev-shm-usage','--disable-gpu','--disable-setuid-sandbox']
  });

  const ctx = await browser.newContext({
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    locale: 'uk-UA',
    timezoneId: 'Europe/Kyiv',
    extraHTTPHeaders: { 'Accept-Language': 'uk-UA,uk;q=0.9,ru;q=0.7,en;q=0.6' }
  });

  await ctx.addInitScript(() => {
    Object.defineProperty(navigator, 'webdriver', { get: () => undefined });
  });

  const page = await ctx.newPage();

  // --- Load page (no networkidle!)
  await page.goto(SOURCE, { waitUntil: 'domcontentloaded', timeout: 120000 });
  await page.waitForTimeout(1500);

  // Try clicking “Main news” tab (UA/RU/EN)
  try {
    const tab = page.locator('a:has-text("Головні новини"), a:has-text("Главные новости"), a:has-text("Main news")').first();
    if (await tab.count()) {
      await tab.click();
      await page.waitForTimeout(1200);
    }
  } catch {}

  // Wait up to 60s for any news link to appear; if not, reload once.
  try {
    await page.waitForSelector('a[href*="/news/"]', { timeout: 60000 });
  } catch {
    console.log('No anchors yet — reloading once…');
    await page.reload({ waitUntil: 'domcontentloaded', timeout: 120000 });
    await page.waitForTimeout(2000);
  }

  // Nudge lazy loads
  await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight / 2));
  await page.waitForTimeout(800);

  // Collect anchors
  const raw = await page.$$eval('a[href*="/news/"]', (as) => {
    const out = [];
    const seen = new Set();
    for (const a of as) {
      let href = a.getAttribute('href') || '';
      let text = (a.textContent || a.getAttribute('title') || '').replace(/\s+/g,' ').trim();

      if (href && !href.startsWith('http')) {
        if (href.startsWith('//')) href = 'https:' + href;
        else if (href.startsWith('/')) href = 'https://ua.tribuna.com' + href;
        else href = 'https://ua.tribuna.com/' + href;
      }

      if (!href) continue;
      if (!/\/news\/\d+(?:[-/]|$)/.test(href)) continue; // accept /news/123456 or /news/123456-title
      if (/\/video|\/live/i.test(href)) continue;        // skip video/live
      if (seen.has(href)) continue;
      seen.add(href);

      out.push({ href, title: text || href });
      if (out.length >= 100) break;
    }
    return out;
  });

  await browser.close();

  const items = Array.from(new Map(raw.map(i => [i.href, i])).values()).slice(0, MAX_ITEMS);
  console.log(`Collected ${items.length} items`);
  items.slice(0, 5).forEach((i, idx) => console.log(`#${idx+1}`, i.title, i.href));

  const now = new Date().toUTCString();
  const rssItems = items.map(it => `
    <item>
      <title>${esc(it.title)}</title>
      <link>${esc(it.href)}</link>
      <guid isPermaLink="true">${esc(it.href)}</guid>
      <pubDate>${now}</pubDate>
      <description>${esc(it.title)}</description>
    </item>`).join('');

  const xml = `<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"><channel>
  <title>Tribuna UA — Main News</title>
  <link>${SOURCE}</link>
  <description>Custom RSS generated by Playwright on GitHub Actions</description>
  <lastBuildDate>${now}</lastBuildDate>
  ${rssItems}
</channel></rss>`;

  mkdirSync('docs', { recursive: true });
  writeFileSync('docs/feed.xml', xml, 'utf8');
  console.log(`Wrote docs/feed.xml with ${items.length} items`);
}

run().catch(e => { console.error(e); process.exit(1); });
